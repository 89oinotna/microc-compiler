# 1 "scanner.mll"
 
    open Parser

    exception Lexing_error of string

    let create_hashtable size init =
        let tbl = Hashtbl.create size in
        List.iter (fun (key, data) -> Hashtbl.add tbl key data) init;
        tbl

    let keyword_table =
    create_hashtable 8 [
        ("if", IF);
        ("else", ELSE);
        ("return", RETURN);
        ("for", FOR);
        ("while", WHILE);
        ("int", INT);
        ("char", CHAR);
        ("void", VOID);
        ("NULL", NULL);
        ("bool", BOOL);
        ("true", TRUE);
        ("false", FALSE)
    ]



# 31 "scan.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\225\255\226\255\227\255\228\255\229\255\
    \230\255\231\255\232\255\233\255\234\255\002\000\001\000\002\000\
    \003\000\031\000\033\000\246\255\248\255\250\255\251\255\085\000\
    \085\000\255\255\095\000\104\000\252\255\253\255\244\255\243\255\
    \240\255\239\255\238\255\237\255\001\000\253\255\254\255\255\255\
    ";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\032\000\020\000\014\000\
    \013\000\019\000\010\000\255\255\255\255\255\255\255\255\008\000\
    \001\000\255\255\000\000\006\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\
    ";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\003\000\038\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\017\000\000\000\000\000\000\000\019\000\014\000\034\000\
    \006\000\005\000\020\000\021\000\011\000\027\000\000\000\023\000\
    \025\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\012\000\022\000\016\000\018\000\015\000\033\000\
    \032\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\008\000\031\000\007\000\030\000\024\000\
    \000\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\010\000\013\000\009\000\035\000\029\000\
    \000\000\000\000\000\000\000\000\028\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\026\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\024\000\000\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \002\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\036\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\255\255\255\255\255\255\000\000\000\000\014\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\000\
    \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\017\000\000\000\018\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\023\000\
    \255\255\255\255\255\255\255\255\023\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
    \026\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\024\000\255\255\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\036\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 37 "scanner.mll"
           inum
# 170 "scan.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "scanner.mll"
                           (
                            let num = int_of_string inum in
			                        LINT(num)
                           )
# 177 "scan.ml"

  | 1 ->
let
# 41 "scanner.mll"
          word
# 183 "scan.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 41 "scanner.mll"
                           (
                            try
                              Hashtbl.find keyword_table word
                            with Not_found ->  ID(word)
                           )
# 191 "scan.ml"

  | 2 ->
# 46 "scanner.mll"
                           (read_comment 0 lexbuf)
# 196 "scan.ml"

  | 3 ->
# 47 "scanner.mll"
                           (read_comment 1 lexbuf)
# 201 "scan.ml"

  | 4 ->
# 48 "scanner.mll"
                           ( SEMICOLON )
# 206 "scan.ml"

  | 5 ->
# 49 "scanner.mll"
                           ( PLUS )
# 211 "scan.ml"

  | 6 ->
# 50 "scanner.mll"
                           ( MINUS )
# 216 "scan.ml"

  | 7 ->
# 51 "scanner.mll"
                           ( TIMES )
# 221 "scan.ml"

  | 8 ->
# 52 "scanner.mll"
                           ( DIV )
# 226 "scan.ml"

  | 9 ->
# 53 "scanner.mll"
                           ( MOD )
# 231 "scan.ml"

  | 10 ->
# 54 "scanner.mll"
                           ( ASSIGN )
# 236 "scan.ml"

  | 11 ->
# 55 "scanner.mll"
                           ( EQ )
# 241 "scan.ml"

  | 12 ->
# 56 "scanner.mll"
                           ( NEQ )
# 246 "scan.ml"

  | 13 ->
# 57 "scanner.mll"
                           ( LESS )
# 251 "scan.ml"

  | 14 ->
# 58 "scanner.mll"
                           ( GREATER )
# 256 "scan.ml"

  | 15 ->
# 59 "scanner.mll"
                           ( LEQ )
# 261 "scan.ml"

  | 16 ->
# 60 "scanner.mll"
                           ( GEQ )
# 266 "scan.ml"

  | 17 ->
# 61 "scanner.mll"
                           ( L_AND )
# 271 "scan.ml"

  | 18 ->
# 62 "scanner.mll"
                           ( L_OR )
# 276 "scan.ml"

  | 19 ->
# 63 "scanner.mll"
                           ( NOT )
# 281 "scan.ml"

  | 20 ->
# 64 "scanner.mll"
                           ( AND )
# 286 "scan.ml"

  | 21 ->
# 65 "scanner.mll"
                           ( COLON  )
# 291 "scan.ml"

  | 22 ->
# 66 "scanner.mll"
                           ( COMMA  )
# 296 "scan.ml"

  | 23 ->
# 67 "scanner.mll"
                           ( LBRACE )
# 301 "scan.ml"

  | 24 ->
# 68 "scanner.mll"
                           ( RBRACE )
# 306 "scan.ml"

  | 25 ->
# 69 "scanner.mll"
                           ( LBRACK )
# 311 "scan.ml"

  | 26 ->
# 70 "scanner.mll"
                           ( RBRACK )
# 316 "scan.ml"

  | 27 ->
# 71 "scanner.mll"
                           ( LPAREN )
# 321 "scan.ml"

  | 28 ->
# 72 "scanner.mll"
                           ( RPAREN )
# 326 "scan.ml"

  | 29 ->
# 73 "scanner.mll"
                           ( token lexbuf )
# 331 "scan.ml"

  | 30 ->
# 74 "scanner.mll"
                           ( Lexing.new_line lexbuf; token lexbuf )
# 336 "scan.ml"

  | 31 ->
# 75 "scanner.mll"
                           ( EOF )
# 341 "scan.ml"

  | 32 ->
let
# 76 "scanner.mll"
         c
# 347 "scan.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 76 "scanner.mll"
                     ( Util.raise_lexer_error lexbuf ("Illegal character " ^ Char.escaped c) )
# 351 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and read_comment tp lexbuf =
   __ocaml_lex_read_comment_rec tp lexbuf 36
and __ocaml_lex_read_comment_rec tp lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 79 "scanner.mll"
                            ( if tp=0 then 
                                Util.raise_lexer_error lexbuf ("Comments not closed") 
                              else 
                                EOF )
# 366 "scan.ml"

  | 1 ->
# 83 "scanner.mll"
                            (if tp=0 then read_comment tp lexbuf else token lexbuf)
# 371 "scan.ml"

  | 2 ->
# 84 "scanner.mll"
                            (read_comment tp lexbuf)
# 376 "scan.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_comment_rec tp lexbuf __ocaml_lex_state

;;

